#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <unistd.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include <stdio.h>
#include <time.h>


#define CONNECTION_PORT 8080

int main(){
	int sockfd, status;

	char buffer[1024];
	int length_of_addr, bytes_read;

	struct sockaddr_in server_addr;
	struct sockaddr_in client_addr;

	char msg[100];
    
    time_t current_time;
    struct tm * time_info;
    char timeString[8];

    time(&current_time);
    time_info = localtime(&current_time);

    strftime(timeString, 8, "%H:%M:%S", time_info);

	sockfd=socket(AF_INET, SOCK_DGRAM, 0);
	if (sockfd<0){
		perror("Socket creation failed");
		exit(EXIT_FAILURE);
	}

	memset(&server_addr, 0, sizeof(server_addr));
	memset(&client_addr, 0, sizeof(client_addr));

	server_addr.sin_family=AF_INET;
	server_addr.sin_port=htons(CONNECTION_PORT);
	server_addr.sin_addr.s_addr=INADDR_ANY;
	server_addr.sin_zero[8]='\0';

	status=bind(sockfd, (const struct sockaddr*)&server_addr, sizeof(server_addr));
	if (status<0){
		perror("Couldn't bind socket");
		exit(EXIT_FAILURE);
	}

	length_of_addr = sizeof(client_addr);
	//confd = accept(sockfd, (struct sockaddr*)&connection_addr, &length_of_addr);

    while(true){
    	bytes_read=recvfrom(sockfd, buffer, 1024, 0, (struct sockaddr*)&client_addr, &length_of_addr);
    	buffer[bytes_read]='\0';
    	printf("\n\tClient: %s", buffer);
    	if(strcmp(buffer, "bye")==0){
    		sendto(sockfd, "bye", 4, 0, (struct sockaddr*)&client_addr, length_of_addr);
    		break;
    	}
        else if(strcmp(buffer, "time")==0){
           sendto(sockfd, timeString, 6, 0, (struct sockaddr*)&client_addr, length_of_addr);
           printf("\n\tYou: "); 
           puts(timeString);
    	}
        else{
            printf("\n\tYou: ");
    	    fgets(msg, 100, stdin);
    	    sendto(sockfd, msg, strlen(msg)-1, 0, (struct sockaddr*)&client_addr, length_of_addr);
        }
    	
    }

    printf("\n\tChat exited\n");

	return 0;
}
